unit Form_GraphViewUnit;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Dialogs, FMXTee.Engine, FMXTee.Procs,
  FMXTee.Chart, Data.Bind.EngExt, Fmx.Bind.DBEngExt, Data.Bind.Components,
  Data.Bind.DBScope, Data.DB, FMXTee.Series, DataFileSaver;

type
  TForm_GraphView = class(TForm)
    Chart_Graph: TChart;
    DataSource_Graph: TDataSource;
    Series1: TLineSeries;
    BindingsList1: TBindingsList;
    Series2: TBarSeries;
  private
    { Private declarations }
  protected
    function DataFieldToSeries(field: TField): TChartSeries;
  public
    procedure SetTitle(title: String);
    procedure SetData(data: TDataSet); overload;
    procedure SetData(schResult: IDataSetIterator; index: Integer); overload;
  end;

var
  Form_GraphView: TForm_GraphView;

implementation

{$R *.fmx}

{ TForm_GraphView }

procedure TForm_GraphView.SetData(data: TDataSet);
var
  series: TLineSeries;
begin
  DataSource_Graph.DataSet := data;

  series := TLineSeries.Create( nil );
  series.
  Chart_Graph.Add
  Chart_Graph.Series[ 0 ].DataSource := data;
end;

function TForm_GraphView.DataFieldToSeries(field: TField): TChartSeries;
var
  series: TChartSeries;
begin
  series := TChartSeries.Create( nil );
  series.Title := field.FieldName;
  series.
end;

procedure TForm_GraphView.SetData(schResult: IDataSetIterator; index: Integer);
var
  iCount: Integer;
begin
  iCount := -1;

  while schResult.MoveNext = true do
  begin
    Inc( iCount );
    if iCount = index then break;
  end;

  if iCount < 0 then exit;

  SetTitle( schResult.CurName );
  SetData( schResult.CurData );
  schResult.MoveFirst;
end;

procedure TForm_GraphView.SetTitle(title: String);
begin
  Chart_Graph.Title.Text[ 0 ] := title;
end;

end.
