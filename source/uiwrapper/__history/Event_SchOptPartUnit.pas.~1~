unit Event_SchOpt_SchOptPartUnit;

interface

uses
  FMX.Controls, Classes, FMX.Types, iniFiles, SearchOption_Intf, DCL_intf,
  FMX.ListBox;

type
  TEvent_AbsSearchOptionPart = class(TObject)
    protected
      FDataHash: IStrMap;
      FExpander: TExpander;
      function StrArrayToStrList(strArr: array of String): TStringList;
      procedure Init(expander: TExpander);
    public
      constructor Create(owner: TExpander); virtual;
      destructor Destroy; override;
      function IsUse: Boolean;
      function IsUseToString: String;

      function GetSearchOptionPart: ISearchOptionPart; virtual; abstract;
  end;



implementation

uses
  HashMap, SysUtils, HashedOptionPart, ColumnListOptionPart;

{ TEvent_AbsSearchOptionPart }


constructor TEvent_AbsSearchOptionPart.Create(owner: TExpander);
begin
  Init( owner );
end;

destructor TEvent_AbsSearchOptionPart.Destroy;
begin
  FDataHash.Clear;
  inherited;
end;

procedure TEvent_AbsSearchOptionPart.Init(expander: TExpander);
begin
  FExpander := expander;
  FDataHash := TStrHashMap.Create;
end;

function TEvent_AbsSearchOptionPart.IsUse: Boolean;
begin
  result := ( FExpander.ShowCheck = false ) or
            ( ( FExpander.ShowCheck = true ) and ( FExpander.IsChecked = true ) );
end;


function TEvent_AbsSearchOptionPart.IsUseToString: String;
begin
  if IsUse = true then
    result := 'true'
  else
    result := 'false';
end;

function TEvent_AbsSearchOptionPart.StrArrayToStrList(
  strArr: array of String): TStringList;
var
  sList: TStringList;
  i: Integer;
begin
  sList := TStringList.Create;

  for i := 0 to High( strArr ) do
  begin
    sList.Add( strArr[ i ] );
  end;

  result := sList;
end;

end.
