unit UIWrapper_StageEditorUnit;

interface

uses
  FMX.Layouts, FMX.Types, Frame_SchOpt_StageInfo, StageOptionPart,
  UIWrapper_LogSearchUnit, DBManager;

type
  TUIWrapper_StageEditor = class(TObject)
    private
      FScrollBox_StageList: TScrollBox;
      FLogSearch: TUIWrapper_LogSearch;
    protected
      procedure StageRelocation(Sender: TObject);
      procedure StageAdding(Sender: TObject);
    public
      constructor Create( stageList: TScrollBox; logSearch: TUIWrapper_LogSearch );
      procedure Add;
      procedure Remove( stage: TFmxObject );
      procedure Delete(index: Integer);
      procedure DeleteLast;
      function GetStageInfo(index: Integer): TFrame_SchOpt_StageInfo;
      function GetStageOption(index: Integer): TStageOptionPart;
      //function GetStageOptionList: TStageOptionList;
      procedure SetEnabled(val: Boolean);
      function Count: Integer;
      procedure SetDBManager(dbm: TAbsDBManager);
  end;

implementation

uses
  FMX.Edit, System.SysUtils;

{ TEvent_SchOpt_StageEditor }

procedure TUIWrapper_StageEditor.Add;
var
  frameStage: TFrame_SchOpt_StageInfo;
  iCount: Integer;
begin
  frameStage := TFrame_SchOpt_StageInfo.Create( FScrollBox_StageList );
  iCount := FScrollBox_StageList.ComponentCount - 2; //Default 2

  frameStage.Position.X := FRAME_STAGEINFO_PADDING;
  frameStage.Position.Y := FRAME_STAGEINFO_PADDING +
  ( ( FRAME_STAGEINFO_HEIGHT + FRAME_STAGEINFO_PADDING ) * iCount );
  frameStage.Opacity := 0.5;

  frameStage.OnRemove := StageRelocation;
  frameStage.OnInsertLogData := StageAdding;
  FScrollBox_StageList.AddObject( frameStage );
end;

function TUIWrapper_StageEditor.Count: Integer;
begin
  result := FScrollBox_StageList.ComponentCount - 2;
end;

constructor TUIWrapper_StageEditor.Create(stageList: TScrollBox; logSearch: TUIWrapper_LogSearch);
begin
  FScrollBox_StageList := stageList;
  FLogSearch := logSearch;
  Add;
end;

procedure TUIWrapper_StageEditor.Delete(index: Integer);
begin
  FScrollBox_StageList.Components[ index ].Destroy;
end;

procedure TUIWrapper_StageEditor.DeleteLast;
begin
  Delete( FScrollBox_StageList.ComponentCount - 1 );
end;

function TUIWrapper_StageEditor.GetStageInfo(
  index: Integer): TFrame_SchOpt_StageInfo;
begin
  result := FScrollBox_StageList.Components[ index ] as TFrame_SchOpt_StageInfo;
end;

function TUIWrapper_StageEditor.GetStageOption(index: Integer): TStageOptionPart;
var
  stgOpt: TStageOptionPart;
begin
  if ( FScrollBox_StageList.ComponentCount - 2 ) < index then
  begin
    result := nil;
  end
  else
  begin
    result := ( FScrollBox_StageList.Components[ index + 1 ] as
      TFrame_SchOpt_StageInfo ).GetStageOption;
  end;

end;

//function TUIWrapper_StageEditor.GetStageOptionList: TStageOptionList;
//var
//  stgOptList: TStageOptionList;
//  i: Integer;
//begin
//  stgOptList := TStageOptionList.Create;
//
//  for i := 0 to FScrollBox_StageList.ComponentCount - 3  do
//  begin
//    stgOptList.Add( GetStageOption( i ) );
//  end;
//
//  result := stgOptList;
//end;

procedure TUIWrapper_StageEditor.Remove(stage: TFmxObject);
begin
  FScrollBox_StageList.RemoveObject( stage );
end;

procedure TUIWrapper_StageEditor.SetDBManager(dbm: TAbsDBManager);
begin
  FLogSearch.SetDBManager( dbm );
end;

procedure TUIWrapper_StageEditor.SetEnabled(val: Boolean);
begin
  FScrollBox_StageList.Enabled := val;
  FLogSearch.SetEnabled( val );
end;

procedure TUIWrapper_StageEditor.StageAdding(Sender: TObject);
var
  stage: TFrame_SchOpt_StageInfo;
  iCount: Integer;
  i: Integer;
begin
  stage := Sender as TFrame_SchOpt_StageInfo;
  iCount := FScrollBox_StageList.ComponentCount;
  for i := 0 to iCount - 1 do
  begin
    if FScrollBox_StageList.Components[ i ].Equals( Sender ) = true then
    begin
      if i = ( iCount - 1 ) then Add;
    end;
  end;
end;

procedure TUIWrapper_StageEditor.StageRelocation(Sender: TObject);
var
  i: Integer;
  frameStage: TFrame_SchOpt_StageInfo;
begin
  for i := 1 to FScrollBox_StageList.ComponentCount - 1 do
  begin
    frameStage := TFrame_SchOpt_StageInfo( FScrollBox_StageList.Components[ i ] );
    frameStage.Position.X := FRAME_STAGEINFO_PADDING;
    frameStage.Position.Y := FRAME_STAGEINFO_PADDING +
      ( FRAME_STAGEINFO_PADDING + FRAME_STAGEINFO_HEIGHT ) * ( i - 1 );
  end;
end;

end.

