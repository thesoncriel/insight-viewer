unit StageOption;

interface

uses
  SearchOption, SearchOption_Intf;

type

  TJournalData = class(TInterfacedObject, ILogData)
    private
      FDate: String;
      FMsg: String;
    public
      constructor Create(date, msg: String);
      function GetDate: String;
      function GetMsg: String;
  end;

  TStageOption = class(TAbsSearchOptionPart)
    private
      FTitle: String;
      FLogData_Start: ILogData;
      FLogData_End: ILogData;
    public
      function GetValues(key: String): String;
      procedure SetValues(key, val: String);

      property Title: String read FTitle write FTitle;
      property StartLog: ILogData read FLogData_Start write FLogData_Start;
      property EndLog: ILogData read FLogData_End write FLogData_End;
  end;

implementation

{ TJournalData }

constructor TJournalData.Create(date, msg: String);
begin
  FDate := date;
  FMsg := msg;
end;

function TJournalData.GetDate: String;
begin
  result := FDate;
end;

function TJournalData.GetMsg: String;
begin
  result := FMsg;
end;

{ TStageOption }

function TStageOption.GetValues(key: String): String;
begin
  if      key = 'title' then result := FTitle
  else if key = 'start' then result := FLogData_Start.GetDate
  else if key = 'start_msg'   then result := FLogData_End.GetMsg
  else if key = 'end'   then result := FLogData_End.GetDate
  else if key = 'end_msg'   then result := FLogData_End.GetMsg
  else    result := '';
end;

procedure TStageOption.SetValues(key, val: String);
begin
  if      key = 'title' then FTitle := val;
  else if key = 'start' then result := FLogData_Start.GetDate
  else if key = 'end'   then result := FLogData_End.GetDate
  else    result := '';
end;

end.
