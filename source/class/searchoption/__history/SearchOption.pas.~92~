unit SearchOption;

interface

uses
  DCL_intf, HashMap, SysUtils, SearchOption_Intf, StageOptionPart, Classes,
  StageOptionPartList, DBManager;

type
  TSearchOption = class(TObject)
    private
      //FOptHash: IStrMap;
      FSearchOptions: array of ISearchOptionPart;
      FSearchOptionPointer: Integer;
      FStageOptionList: TStageOptionList;
      FTableNames: TStringList;
      FDBManager: TAbsDBManager;
    function GetDBMSName: String;
    procedure SetDBMSName(dbms: String);
    protected
      procedure Init; virtual;
      function GetOption(key: String): ISearchOptionPart;
      function GetValue(key_prop: String): String;
      procedure SetOption(key: String; opt: ISearchOptionPart);

    public
      constructor Create;
      destructor Destroy;
      procedure AddOption(key: String; opt: ISearchOptionPart);
      procedure RemoveOption(key: String);
      procedure SetStageOptions(stageOptions: TStageOptionList);
      function GetStageName(stageNum: Integer): String;
      function GetStageNameList: TStringList;
      function Count: Integer;
      function GetQuery: string; overload; virtual;
      function GetQuery(stageNum: Integer): string; overload; virtual;
      function GetQueryList: TStringList; virtual;

      property TableNames: TStringList read FTableNames write FTableNames;
      property Options[key: String]: ISearchOptionPart read GetOption;
      property Values[key_prop: String]: String read GetValue;
      function GetDBMSManager: String; virtual;
      procedure SetDBManager(dbm: TAbsDBManager); virtual;
  end;

implementation

uses
  QueryReader, Const_SearchOptionUnit;

{ TSearchOption }

procedure TSearchOption.AddOption(opt: ISearchOptionPart);
begin
  FOptHash.PutValue( key, opt as TObject);
end;

function TSearchOption.Count: Integer;
begin
  result := FOptHash.Size;
end;

constructor TSearchOption.Create;
begin
  Init;
end;

destructor TSearchOption.Destroy;
begin
  //FOptHash.Clear;
  FTableNames.Free;
end;

function TSearchOption.GetDBMSManager: String;
begin
  result := FDBManager;
end;

function TSearchOption.GetOption(key: String): ISearchOptionPart;
var
  intfRet: ISearchOptionPart;
begin
  if Supports( FOptHash.GetValue( key ), ISearchOptionPart, intfRet ) = true  then
  result := intfRet;
end;

function TSearchOption.GetQuery(stageNum: Integer): string;
var
  stgOpt: TStageOption;
begin
  if stageNum < 0 then
  begin
    stgOpt := TStageOption.Create;
    stgOpt.SetUse( false );
    FOptHash.PutValue( 'stage', stgOpt );
  end
  else
  begin
    FOptHash.PutValue( 'stage', FStageOptionList.GetStageOption( stageNum ) );
  end;
  result := GetQuery;
end;

function TSearchOption.GetQueryList: TStringList;
var
  sList: TStringList;
  i: Integer;
begin
  sList := TStringList.Create;

  for i := 0 to FStageOptionList.Count - 1 do
  begin
    sList.Add( GetQuery( i ) );
  end;

  result := sList;
end;

function TSearchOption.GetStageName(stageNum: Integer): String;
begin
  result := FStageOptionList.GetStageOption( stageNum ).StageName;
end;

function TSearchOption.GetStageNameList: TStringList;
var
  sList: TStringList;
  i: Integer;
begin
  sList := TStringList.Create;

  for i := 0 to FStageOptionList.Count - 1 do
  begin
    sList.Add( FStageOptionList.GetStageOption( i ).StageName );
  end;

  result := sList;
end;

function TSearchOption.GetQuery: string;
var
  sTagQuery: String;
  queryReader: TQueryReader;
  i: Integer;
  sList: TStringList;
begin
  queryReader := TQueryReader.Create( FDBManager.GetDBMSName, 'insightviewer' );
  sTagQuery := queryReader.GetQuery( 'template.viewer' );
  sList := TStringList.Create;
  sList.Delimiter := '.';

  for i := 0 to Count - 1 do
  begin
    sList.DelimitedText := SOP_ITEM_SEQ[ i ];
    sTagQuery := Options[ sList[ 0 ] ].InsertPartToQuery( sTagQuery, sList[ 1 ], i );
  end;

  queryReader.Free;
  result := sTagQuery;
end;

function TSearchOption.GetValue(key_prop: String): String;
var
  sList: TStringList;
  sRet: String;
begin
  sList := TStringList.Create;
  sList.Delimiter := '.';
  slist.DelimitedText := key_prop;

  sRet := GetOption( sList[ 0 ] ).GetValues( sList[ 1 ] );
  sList.Free;
  result := sRet;
end;

procedure TSearchOption.Init;
begin
  FSearchOptionPointer := 0;
  FTableNames := TStringList.Create;
end;

procedure TSearchOption.RemoveOption(key: String);
begin

end;

procedure TSearchOption.SetDBManager(dbm: TAbsDBManager);
begin
  FDBManager := dbm;
end;

procedure TSearchOption.SetOption(key: String; opt: ISearchOptionPart);
begin

end;

procedure TSearchOption.SetStageOptions(stageOptions: TStageOptionList);
begin
  FStageOptionList := stageOptions;
end;

end.
