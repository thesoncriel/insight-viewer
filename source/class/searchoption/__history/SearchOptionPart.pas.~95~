unit SearchOptionPart;

interface

uses
  Classes, DCL_intf, SearchOption_Intf;

type
  TSearchOptionPart = class(TAbsSearchOptionPart)
    protected
      FHashMap: IStrMap;
    public
      constructor Create; virtual;
      destructor Destroy;
      function GetValues(key: String): String; virtual; override;
      procedure SetValues(key, val: String); virtual; override;
      property Items[key: String]: String read GetValues write SetValues;
  end;




implementation

uses
  HashMap, System.SysUtils, QueryReader;

{ TSearchOptionPart }

constructor TSearchOptionPart.Create;
begin
  FHashMap := TStrHashMap.Create;
  FUse := false;
end;

destructor TSearchOptionPart.Destroy;
begin
  FHashMap.Clear;
  FHashMap._Release;
  inherited;
end;

function TSearchOptionPart.GetValues(key: String): String;
begin
  if key = 'use' then
    result := BoolToStr( FUse )
  else
    result := GetValues( key );
end;

function TSearchOptionPart.InsertPartToQuery(tagQuery, key: String;
  currIndex: Integer): String;
var
  sTemp: String;
  sVal: String;
begin
  sVal := Items[ key ];

  if (sVal = 'true') or (sVal = 'false') then
    sTemp := InsertPartToQueryByBoolean( tagQuery, StrToBool( sVal), currIndex )
  else
    sTemp := StringReplace( tagQuery, '{' + IntToStr( currIndex ) + '}', Items[ key ], [ rfReplaceAll, rfIgnoreCase ] );

  result := sTemp;
end;

function TSearchOptionPart.IsUse: Boolean;
begin
  result := FUse;
end;

function TSearchOptionPart.InsertPartToQueryByBoolean(tagQuery: String; val: Boolean;
  currIndex: Integer): String;
var
  sRightBracket1: String;
  sRightBracket2: String;
begin
  if val = true then
  begin
    sRightBracket1 := 't}';
    sRightBracket2 := 'f}';
  end
  else
  begin
    sRightBracket1 := 'f}';
    sRightBracket2 := 't}';
  end;

  tagQuery := StringReplace( tagQuery, '{' + IntToStr( currIndex ) + sRightBracket1, '', [ rfReplaceAll, rfIgnoreCase ] );
  tagQuery := StringReplace( tagQuery, '{/' + IntToStr( currIndex ) + sRightBracket1, '', [ rfReplaceAll, rfIgnoreCase ] );
  tagQuery := StringReplace( tagQuery, '{' + IntToStr( currIndex ) + sRightBracket2, '/*', [ rfReplaceAll, rfIgnoreCase ] );
  tagQuery := StringReplace( tagQuery, '{/' + IntToStr( currIndex ) + sRightBracket2, '*/', [ rfReplaceAll, rfIgnoreCase ] );

  result := tagQuery;
end;

procedure TSearchOptionPart.SetValues(key: String; val: String);
begin
  FHashMap.PutValue( key, TObject( val ) );
end;

procedure TSearchOptionPart.SetUse(val: Boolean);
begin
  FUse := val;
end;



end.
